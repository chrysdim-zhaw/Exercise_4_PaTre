---
title: WEEK 4 EXERCISES 
author: Dimitri Chryssolouris
format: html
toc: true  # Enable Table of Contents
toc-depth: 2  # Optional: Set the depth of ToC (default is 3)
number-sections: true  # Optional: Number headings in the document
echo: TRUE
bibliography: bibliography.bib
---


# Preparation

## Input: Segmentation

```{r}

library("readr")
library("sf")
library("dplyr")
library(ggplot2)

wildschwein <- read_delim("Data/wildschwein_BE_2056.csv", ",")


# Careful! What Timezone is assumed?
sabi <- wildschwein |>
    st_as_sf(coords = c("E", "N"), crs = 2056, remove = FALSE) |>
    filter(
      TierName == "Sabi", 
      DatetimeUTC >= "2015-07-01", 
      DatetimeUTC < "2015-07-03"
      )

ggplot(sabi) +
  geom_sf() +
  geom_path(aes(E, N)) +
  theme_minimal()

```

### Step a): Specify a temporal wondow 
```{r}

#define the function


distance_by_element <- function(later, now){
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

# Ensure your data is sorted by time
sabi <- sabi |>
  arrange(DatetimeUTC) |>
  mutate(
    # Distance from pos[n-2] to pos[n]
    dist_n_minus_2 = distance_by_element(lag(geometry, 2), geometry),
    # Distance from pos[n-1] to pos[n]
    dist_n_minus_1 = distance_by_element(lag(geometry, 1), geometry),
    # Distance from pos[n] to pos[n+1]
    dist_n_plus_1 = distance_by_element(geometry, lead(geometry, 1)),
    # Distance from pos[n] to pos[n+2]
    dist_n_plus_2  = distance_by_element(geometry, lead(geometry, 2))
  )

sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(dist_n_minus_2, dist_n_minus_1, dist_n_plus_1, dist_n_plus_2)) #with na.rm = TRUE the beginning and End would stay
    )|>
    ungroup()

```


### Step c): Remove “static points”

We can now determine if an animal is moving or not by specifying a threshold distance on stepMean. In our example, we use the mean value as a *threshold: Positions with distances below this value are considered static*.

```{r}
sabi <- sabi |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |>
    filter(!static)

sabi_filter |>
    ggplot(aes(E, N)) +
    geom_point(data = sabi, col = "red") +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")


```

